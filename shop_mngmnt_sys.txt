import csv
from tabulate import tabulate
class Product:
    def __init__(self, product_id, name, price, quantity):
        self.product_id = product_id
        self.name = name
        self.price = price
        self.quantity = quantity
class Inventory:
    def __init__(self, file_name='inventory.csv'):
        self.file_name = file_name
        self.products = self.load_inventory()
    def load_inventory(self):
        products = {}
        try:
            with open(self.file_name, mode='r') as file:
                reader = csv.reader(file)
                next(reader)
                for row in reader:
                    products[int(row[0])] = Product(int(row[0]), row[1], float(row[2]), int(row[3]))
        except FileNotFoundError:
            open(self.file_name, mode='w').write('product_id,product_name,price,quantity\n')
        return products
    def save_inventory(self):
        with open(self.file_name, mode='w', newline='') as file:
            writer = csv.writer(file)
            writer.writerow(['product_id', 'product_name', 'price', 'quantity'])
            for product in self.products.values():
                writer.writerow([product.product_id, product.name, product.price, product.quantity])
    def add_product(self, product):
        self.products[product.product_id] = product
        self.save_inventory()
    def update_product(self, product_id, quantity_sold):
        if product_id in self.products:
            self.products[product_id].quantity -= quantity_sold
            self.save_inventory()
    def display_inventory(self):
        table = [[p.product_id, p.name, p.price, p.quantity] for p in self.products.values()]
        print(tabulate(table, headers=['ID', 'Name', 'Price', 'Stock'], tablefmt='grid'))
class Sale:
    def __init__(self, sale_id):
        self.sale_id = sale_id
        self.items = []
    def add_item(self, product, quantity):
        total_price = product.price * quantity
        self.items.append([self.sale_id, product.product_id, product.name, quantity, total_price])
class SalesManager:
    def __init__(self, file_name='sales.csv'):
        self.file_name = file_name
        self.sales = []
        self.load_sales()
    def load_sales(self):
        try:
            with open(self.file_name, mode='r') as file:
                reader = csv.reader(file)
                next(reader)  # Skip header
                self.sales = [list(row) for row in reader]
        except FileNotFoundError:
            open(self.file_name, mode='w').write('sale_id,product_id,product_name,quantity_sold,total_price\n')
    def record_sale(self, sale):
        with open(self.file_name, mode='a', newline='') as file:
            writer = csv.writer(file)
            writer.writerows(sale.items)
        self.sales.extend(sale.items)
    def display_sales(self):
        self.load_sales()
        if not self.sales:
            print("No sale records available")
            return
        print("Debug sales data ->", self.sales)
        print(tabulate(self.sales, headers=['Sale ID', 'Product ID', 'Name', 'Quantity', 'Total Price'], tablefmt='grid'))
class ShopSystem:
    def __init__(self):
        self.inventory = Inventory()
        self.sales_manager = SalesManager()
    def menu(self):
        while True:
            print("\n--- Small Shop Management System ---")
            print("1. View Inventory")
            print("2. Add Product to Inventory")
            print("3. Process a Sale")
            print("4. View Sales Report")
            print("5. Exit")
            choice = input("Enter your choice: ")
            if choice == '1':
                self.inventory.display_inventory()
            elif choice == '2':
                self.add_product()
            elif choice == '3':
                self.process_sale()
            elif choice == '4':
                self.sales_manager.display_sales()
            elif choice == '5':
                print("Exiting...")
                break
            else:
                print("Invalid choice! Try again.")
    def add_product(self):
        product_id = int(input("Enter Product ID: "))
        name = input("Enter Product Name: ")
        price = float(input("Enter Price: "))
        quantity = int(input("Enter Stock Quantity: "))
        self.inventory.add_product(Product(product_id, name, price, quantity))
        print("Product added successfully!")
    def process_sale(self):
        sale_id = input("Enter Sale ID: ")
        sale = Sale(sale_id)
        while True:
            product_id = input("Enter Product ID to sell (or 'done' to finish): ")
            if product_id.lower() == 'done':
                break
            product_id = int(product_id)
            if product_id in self.inventory.products:
                quantity = int(input(f"Enter quantity for {self.inventory.products[product_id].name}: "))
                if quantity <= self.inventory.products[product_id].quantity:
                    sale.add_item(self.inventory.products[product_id], quantity)
                    self.inventory.update_product(product_id, quantity)
                else:
                    print("Not enough stock!")
            else:
                print("Product not found!")
        self.sales_manager.record_sale(sale)
        print(f"Sale {sale_id} recorded successfully.")
if __name__ == "__main__":
    shop = ShopSystem()
    shop.menu()